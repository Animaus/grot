package nl.zoethout.grot.web;

import java.util.Date;
import java.util.GregorianCalendar;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.Map;
import java.util.ResourceBundle;
import java.util.Set;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import nl.zoethout.grot.dao.UserDao;
import nl.zoethout.grot.domain.Address;
import nl.zoethout.grot.domain.Member;
import nl.zoethout.grot.domain.Principal;
import nl.zoethout.grot.domain.Role;
import nl.zoethout.grot.domain.User;
import nl.zoethout.grot.repository.UserRepository;
import nl.zoethout.grot.security.PseudoSecurity;
import nl.zoethout.grot.security.PseudoSecurityExecute;
import nl.zoethout.grot.service.UserService;
import nl.zoethout.grot.validation.MemberValidator;
import nl.zoethout.grot.validation.UserValidator;
import nl.zoethout.grot.validation.poc.Student;
import nl.zoethout.grot.validation.poc.StudentValidator;

@Controller // This class is a Controller
@RequestMapping(path = { "/poc", "/pocs" }) // URL's start with /demo (after Application path)
public class PocController extends WebController {
	private static final String DEFAULT_MESSAGE = "message";
	private static final String DISPATCHER = "poc";
	private Map<String, Object> attributes = new HashMap<String, Object>();
	private ResourceBundle bundle = ResourceBundle.getBundle("poc");
	@Autowired // Get the bean called userRepository which is auto-generated by Spring, we will
				// use it to handle the data
	private UserRepository userRepository;
	@Autowired
	private UserDao userDao;
	@Autowired
	private UserService userService;

	@RequestMapping(value = "start", method = RequestMethod.GET)
	public String rmStart(Map<String, Object> model) {
		setAttributes();
		model.putAll(attributes);
		model.put(DEFAULT_MESSAGE, bundle.getString("MSG_START"));
		return DISPATCHER;
	}

	private void setAttributes() {
		setText("DESCRIPTION");
		setText("VAL_START");
		setText("VAL_DAO");
		setText("VAL_PROPERTIES");
		setText("VAL_REPOSITORY");
		setText("VAL_SAVEUSER");
		setText("VAL_LOGIN_VALID");
		setText("VAL_LOGIN_INVALID");
	}

	private void setText(String key) {
		attributes.put(key, bundle.getString(key));
	}

	@RequestMapping(value = "dao", method = RequestMethod.GET)
	public String rmDao(Model model, HttpServletRequest req) {
		setAttributes();
		model.addAllAttributes(attributes);
		User user = userDao.readUser(1);
		Set<Role> roles = user.getRoles();
		model.addAttribute(DEFAULT_MESSAGE, bundle.getString("MSG_DAO") + roles);
		return DISPATCHER;
	}

	// inject via application.properties
	@Value("${msg.welcome:test}")
	private String message = "Hello World";

	@RequestMapping(value = "properties", method = RequestMethod.GET)
	public String rmProperties(Map<String, Object> model) {
		setAttributes();
		model.putAll(attributes);
		model.put(DEFAULT_MESSAGE, bundle.getString("MSG_PROPERTIES") + this.message);
		return DISPATCHER;
	}

	@RequestMapping(value = { "/repository", "/repo" }, method = RequestMethod.GET)
	public @ResponseBody Iterable<User> rmRepository() {
		// Returns a JSON or XML with the users (in the body, not a page)
		return userRepository.findAll();
	}

	@RequestMapping(value = "/saveUser")
	public String rmSaveUser(Map<String, Object> model) {
		User user = userService.readUser("testu00");
		if (user == null) {
			user = testUser();
		}
		Address address = userService.readAddress(user.getUserId());
		if (address == null) {
			address = testAddress();
		}
		Member member = new Member(userService, user, address);
		member.save();
		return "redirect:/user/testu00";
	}

	private User testUser() {
		User user = new User();
		user.setUserName("testu00");
		user.setFirstName("Test");
		user.setLastName("User");
		user.setPrefix("");
		user.setSex("m");
		user.setPassword("123456");
		user.setEnabled(true);
		GregorianCalendar gregorianCalendar = new GregorianCalendar(2018, 0, 11);
		Date dateBirth = gregorianCalendar.getTime();
		user.setDateBirth(dateBirth);
		Date today = new Date(System.currentTimeMillis());
		user.setDateRegistered(today);
		return user;
	}

	private Address testAddress() {
		Address address = new Address();
		address.setStreetName("Test street");
		address.setStreetNumber("99");
		address.setZip("9999 XX");
		address.setCity("Test");
		address.setCountry("BE");
		address.setPhone1("1234567890");
		address.setPhone2("");
		address.setEmail1("testu00@domain.org");
		address.setEmail2("");
		return address;
	}

	@RequestMapping(value = "/loginValid")
	public String rmLoginValid(Map<String, Object> model) {
		setAttributes();
		model.putAll(attributes);
		User usr = userService.loginUser("Gerard", "123456");
		if (usr == null) {
			model.put(DEFAULT_MESSAGE, "Not found!");
		} else {
			model.put(DEFAULT_MESSAGE, usr.toString());
		}
		return DISPATCHER;
	}

	@RequestMapping(value = "loginInvalid")
	public String rmLoginInvalid(Map<String, Object> model) {
		setAttributes();
		model.putAll(attributes);
		User usr = userService.loginUser("Thierry", "123456");
		if (usr == null) {
			model.put(DEFAULT_MESSAGE, "Not found!");
		} else {
			model.put(DEFAULT_MESSAGE, usr.toString());
		}
		return DISPATCHER;
	}

	@RequestMapping(value = "denied")
	@PseudoSecurity(roles = { "admin", "user" })
	public String rmDenied(Map<String, Object> model, HttpServletRequest req, HttpServletResponse res) {
		// For testing : simulate a login
		String[] roles = { "huey", "duey", "luey" };
		HttpSession session = req.getSession();
		session.setAttribute("roles", roles);
		// Redirect on execution denied
		PseudoSecurityExecute.run(req, res, this.getClass());
		// Set navigational links
		setAttributes();
		// To page
		model.putAll(attributes);
		return DISPATCHER;
	}

	@RequestMapping(value = "granted")
	@PseudoSecurity(roles = { "admin", "user" })
	public String rmGranted(Map<String, Object> model, HttpServletRequest req, HttpServletResponse res) {
		// For testing : simulate a login
		String[] roles = { "user" };
		HttpSession session = req.getSession();
		session.setAttribute("roles", roles);
		// Redirect on execution denied
		PseudoSecurityExecute.run(req, res, this.getClass());
		// Set navigational links
		setAttributes();
		// Useful code...
		model.put(DEFAULT_MESSAGE,
				"Access Granted" + "<br>Context : " + req.getContextPath() + "<br>QueryString : " + req.getQueryString()
						+ "<br>RequestURI : " + req.getRequestURI() + "<br>RequestURL : " + req.getRequestURL()
						+ "<br>ServletPath : " + req.getServletPath() + "<br>ServerName : " + req.getServerName()
						+ "<br>ServerPort : " + req.getServerPort() + "<br># ");
		// To page
		model.putAll(attributes);
		return DISPATCHER;
	}

	@RequestMapping(value = "/student", method = RequestMethod.GET)
	public String rmStudentGet(Map<String, Object> model) {
		model.put(DEFAULT_MESSAGE, "Start. Click any link to check...");
		return "validation/student";
	}

	@RequestMapping(value = "/student", method = RequestMethod.POST)
	public String rmStudentPost(@ModelAttribute("student") Student student, BindingResult bindingResult, Model model) {

		StudentValidator studentValidator = new StudentValidator();
		studentValidator.validate(student, bindingResult);

		if (bindingResult.hasErrors()) {
			return "validation/student";
		} else {
			return "validation/result";
		}

	}

	@ModelAttribute("student")
	public Student maStudent() {
		return new Student();
	}

	@RequestMapping(value = "/user", method = RequestMethod.GET)
	public String rmUserGet(Model model, HttpServletRequest req) {
		// Chosen member - username
		String username = "testu00";
		// Chosen member - reading
		User user = userService.readUser(username);
		// Chosen member - session
		provider(req).setSAFixed(user);
		// Chosen member - model (P19-02 / mutable user)
		model.addAttribute("mutable", user);

		return "user_writable";
	}

	@RequestMapping(value = "/user", method = RequestMethod.POST)
	public String rmUserPost(@ModelAttribute("student") Student student, BindingResult bindingResult, Model model) {
	
		StudentValidator studentValidator = new StudentValidator();
		studentValidator.validate(student, bindingResult);
	
		if (bindingResult.hasErrors()) {
			return "user_writable";
		} else {
			return "user_readable";
		}
	
	}

	// TODO 26 - Users - fieldvalidation - 01 GET added
//	@RequestMapping(value = "/user", method = RequestMethod.GET)
	public String rmOozerGet(Model model, HttpServletRequest req) {
		// Get the username
		String username = "testu00";
		// Chosen member - getting user entity
		User user = userService.readUser(username);
		// Chosen member - to session attributes
		provider(req).setSAFixed(user);
		// Chosen member - to model attributes (P19-02)
		model.addAttribute("user", user);
		// Associated address - to model attributes
//		model.addAttribute("address", user.getAddress());
		// Page
		return "user_test_verified_write";
	}

	// TODO 26 - Users - fieldvalidation - 03 POST added
//	@RequestMapping(value = "/user", method = RequestMethod.POST)
	public String rmOozerPost(@ModelAttribute("user") User user, @ModelAttribute("address") Address address,
			BindingResult bindingResult, Model model, HttpServletRequest req) {
		// Validator
		UserValidator userValidator = new UserValidator();
		// validate
		userValidator.validate(user, bindingResult);
//		// Associated address - to model attributes
//		Address address = user.getAddress();
//		bindingResult.getFieldValue("address");
//		bindingResult.getRawFieldValue("address");
//		model.addAttribute("address", address);

		// pages
		if (bindingResult.hasErrors()) {
			return "user_test_verified_write";
		} else {
			return "user_test_verified";
		}
	}

	@RequestMapping(value = "/member", method = RequestMethod.GET)
	public String rmMemberGet(Model model, HttpServletRequest req) {
		// Which member (user) to get
		Member member = userService.readMember("testu00");
		// Chosen member to session attributes
		provider(req).setSAMember(member);
		// Add member entity as attribute to model (P14-02)
		model.addAttribute("member", member);
		// Page
		return "member_verified_write";
	}

	@RequestMapping(value = "/member", method = RequestMethod.POST)
	public String rmMemberPost(@ModelAttribute("member") Member member, BindingResult bindingResult, Model model,
			HttpServletRequest req) {

		// Get member from session
		Member sesMember = provider(req).getSAMember();
		int userId = sesMember.getUserId();

		member.setUserService(userService);
		member.setUser(userService.readUser(userId));
		member.setAddress(userService.readAddress(userId));

		MemberValidator memberValidator = new MemberValidator();
		memberValidator.validate(member, bindingResult);
		if (bindingResult.hasErrors()) {
			return "member_verified_write";
		} else {
			return "member_verified";
		}

	}

	@ModelAttribute("roles")
	public Set<Role> maRoles(HttpServletRequest req) {
		Set<Role> result = new LinkedHashSet<Role>();
		Principal principal = provider(req).getSAPrincipal();
		if (principal == null) {
			return null;
		} else if (principal.hasRole(ADMIN)) {
			for (Role role : userService.readRoles()) {
				result.add(role);
			}
			return result;
		} else {
			return null;
		}
	}
}
