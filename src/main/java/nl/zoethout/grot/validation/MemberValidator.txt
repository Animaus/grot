package nl.zoethout.grot.validation;

import org.springframework.validation.Errors;

import nl.zoethout.grot.domain.Member;
import nl.zoethout.grot.service.UserService;

// TODO 26 - Users - fieldvalidation
public class MemberValidator extends MainValidator {

	// See:
	// http://docs.spring.io/spring/docs/current/spring-framework-reference/html/validation.html
	// https://stackoverflow.com/questions/12146298/spring-mvc-how-to-perform-validation#

	// private final Validator addressValidator;
	private UserService userService;

	public MemberValidator(UserService userService) {
		// this.addressValidator = null;
		this.userService = userService;
	}

	// public UserValidator(UserService userService, Validator addressValidator) {
	// if (addressValidator == null) {
	// throw new IllegalArgumentException("The supplied [Validator] is " + "required
	// and must not be null.");
	// }
	// if (!addressValidator.supports(Address.class)) {
	// throw new IllegalArgumentException(
	// "The supplied [Validator] must " + "support the validation of [Address]
	// instances.");
	// }
	// this.addressValidator = addressValidator;
	// this.userService = userService;
	// }

	@Override
	public boolean supports(Class<?> clazz) {
		return Member.class.isAssignableFrom(clazz);
	}

	@Override
	public void validate(Object target, Errors errors) {

//		errors.rejectValue("firstName", "field.invalid");

		
		// Object to be validated
//		Member member = (Member) target;

		// // FIXME Add dummy password
		// if (member.getPassword() == null) {
		// member.setPassword("123456");
		// }

		// // Activate address-validation (nested in User)
		// try {
		// errors.pushNestedPath("address");
		// ValidationUtils.invokeValidator(addressValidator, member.getAddress(),
		// errors);
		// } finally {
		// errors.popNestedPath();
		// }

		// Required fields
		// List<String> required = new ArrayList<String>();
		// required.add("firstName");
		// required.add("lastName");
		// required.add("sex");
		// required.add("dateBirth");
		// required.add("mailAddress");

		// Check value of required fields
		// for (String fieldName : required) {
		// // Deze regel dient voor te komen voor elk veld wat niet leeg mag
		// // zijn. Dat kunnen er veel zijn, vandaar het loopje en de arraylist
		// // om code-herhaling te voorkomen...
		// ValidationUtils.rejectIfEmptyOrWhitespace(errors, fieldName,
		// "field.required");
		// }

		// String strError = "";

		// // Validatie mailadres
		// // FIXME strError = userService.validMailAddress(user);
		// if (!strError.equals("")) {
		// errors.rejectValue("mailAddress", strError);
		// }

		// // Validatie vast nummer
		// strError = userService.validPhoneNumber(member);
		// if (!strError.equals("")) {
		// // Ongeldige karakters
		// errors.rejectValue("phoneNumber", "field.invalid");
		// } else {
		// strError = userService.validPhoneNumber(member);
		// if (!strError.equals("")) {
		// errors.rejectValue("phoneNumber", strError);
		// }
		// }

		// // Validatie mobiel nummer
		// if (!isAlphaNumeric("")) {
		// // FIXME if (!isAlphaNumeric(user.getMobileNumber())) {
		// // Ongeldige karakters
		// errors.rejectValue("mobileNumber", "field.invalid");
		// } else {
		// // FIXME strError = userService.validMobileNumber(user);
		// if (!strError.equals("")) {
		// errors.rejectValue("mobileNumber", strError);
		// }
		// }

		// // Validatie alias
		// if (!isAlphaNumeric("")) {
		// // FIXME if (!isAlphaNumeric(user.getAlias())) {
		// // Ongeldige karakters
		// errors.rejectValue("alias", "field.invalid");
		// } else {
		// // FIXME strError = userService.validAlias(user);
		// if (!strError.equals("")) {
		// errors.rejectValue("alias", strError);
		// }
		// }

		// // Specifiekere veldvalidatie
		// String firstName = member.getFirstName();
		// if (!isAlphaSpace(firstName)) {
		// // Ongeldige karakters
		// errors.rejectValue("firstName", "field.invalid");
		// } else if (firstName.length() < 2 & firstName.length() > 0) {
		// errors.rejectValue("firstName", "firstName.length");
		// }

		// String lastName = member.getLastName();
		// if (!isAlphaSpace(lastName)) {
		// // Ongeldige karakters
		// errors.rejectValue("lastName", "field.invalid");
		// } else if (lastName.length() < 2 & lastName.length() > 0) {
		// errors.rejectValue("lastName", "lastName.length");
		// }

	}

}